'LM 2576': 'to263 <[ Vin Out Gnd Feedback on/off ]>'
R1206: '''
  # From http://www.resistorguide.com/resistor-sizes-and-packages/
  r1206 =
      a: 1.6mm
      b: 0.9mm
      c: 2mm
  
  {a, b, c} = r1206
  
  p1 = pad b, a
  p2 = p1.clone!
      ..position.x += (c + b) |> mm2px
  
'''
'find-test': '''
  # --------------------------------------------------
  # all lib* scripts will be included automatically.
  # --------------------------------------------------
  find-pin "c1", 5
      ..pad.selected = yes
  
  
'''
lib_to263: '''
  to263 = (pin-labels) ->
      # From: http://www.ti.com/lit/ds/symlink/lm2576.pdf
      dimensions = d =
          H   : 14.17mm
          die : x:8mm     y:10.8mm
          pads: x:2.16mm  y:1.07mm
          pd  : 1.702
  
      p1 = pad 1, d.die
          ..data.aecad.label = pin-labels.0
  
      padg = group()
      for index, pin of [1 to 5]
          pad pin, d.pads, padg
              ..position.y -= index * mm2px d.pd
              ..data.aecad.label = pin-labels[index]
  
      padg.position =
          d.H |> mm2px
          p1.bounds.height / 2
          
  
'''
'proxy-test': '''
  
  x = pad 1, {x: 10, y: 20}
  y = ComponentProxy x
  y.on-set 'position', (val) ->
      console.log "Doing MITM for position: ", val
      [null, val]
  y.position += [10, 20]
  
'''
lib_ComponentProxy: '''
  class ComponentProxy
      (main) ~>
          if main 
              @main = that 
          @__handlers = {}
          for let key of @main
              type = typeof! @main[key]
              if type is \\Function 
                  @[key] = @main[key]
              else
                  #console.log "Defining property: #{key}", type
                  Object.defineProperty @, key, do
                      get: ~>
                          @main[key]
      
                      set: (val) ~>
                          if @__handlers[key]?
                              [err, res] = @__handlers[key] val
                              unless err
                                  @main[key] = res
                          else
                              @main[key] = val
  
      on-set: (prop, handler) ->
          @__handlers[prop] = handler
  
  
  /*
  y = new ComponentProxy new Group
  y.on-set 'position', (val) ->
      console.log "Doing MITM for position: ", val
      [null, val]
  y.position += [10, 10]
  */
'''
lib_pads: '''
  # --------------------------------------------------
  # all lib* scripts will be included automatically.
  #
  # This script will also be treated as a library file.
  # --------------------------------------------------
  
  
  # Pad
  # -----------------------------------
  # Usage: 
  #
  #   .position: Position 
  #
  
  pad = (pin-number, dimensions, parent) ->
      rect = new Rectangle do 
          from: [0, 0]
          to: dimensions |> mm2px
          
      _group = new Group do 
          position: rect.center
          parent: parent or g 
          data:
              aecad:
                  pin: pin-number
          applyMatrix: yes
          
      cu = new Path.Rectangle do
          rectangle: rect
          fillColor: 'purple'
          parent: _group
          stroke-width: 0
          data:
              aecad:
                  pin: pin-number
  
      ttip = new PointText do
          point: cu.bounds.center 
          content: pin-number
          fill-color: 'white'
          parent: _group
          font-size: 3
          position: cu.bounds.center
  
      return _group
  
  
'''
'class-approach-test': '''
  
  
  
  cross = new class CanvasHelper extends Container 
      -> 
          super!
          new Path.Line do
              from: [-50, 0]
              to: [50, 0]
              stroke-color: \\white
              parent: @g
              
          new Path.Line do
              from: [0, -50]
              to: [0, 50]
              stroke-color: \\white
              parent: @g
              
          @g.opacity = 0.5
          
      print-mode: ~
          (val) -> @g.visible = not val
  
  
  
  fp = new Footprint do 
      name: 'foo'
  
  pad1 = new Pad fp, do
      pin: 1
      width: 5
      height: 15
  
  c = new Container fp
  
  for index in [1 to 5]
      pad = new Pad c, do 
          pin: index
          width: 1
          height: 2
  
      pad.position.y -= 16 * index
      
  c.position = pad1.position
  c.position.x += 23
  
  c2 = new Container fp
  
  for index in [1 to 5]
      pad = new Pad c2, do 
          pin: "#{index}c"
          dia: 3
          drill: 1
  
      pad.position.y -= 16 * index
  
  c2.position = c.position
  c2.position.x += 10
  
      
  #fp.color = 'red'
  #fp.rotate 45
  #fp.g.rotate -45
  x = find-comp 'foo'
  <~ sleep 1000ms
  x.rotate -45
  #x.selected = yes
  #console.log x.toJSON()
      
  #fp.mirror!
  #fp.print-mode = yes 
  
  
'''
lib_find: '''
  
  find-pin = (name, pin) !->
      _find = (item) !->
          if item.hasChildren!
              for item.children
                  if _find ..
                      return that
          else if pin and item.data?aecad?pin is pin
              return item
          return null 
  
      container = find-comp name 
      pad = _find container
      return {container, pad}
  
'''